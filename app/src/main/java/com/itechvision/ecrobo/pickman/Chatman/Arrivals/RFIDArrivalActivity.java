package com.itechvision.ecrobo.pickman.Chatman.Arrivals;import android.app.Dialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.content.res.Resources;import android.graphics.drawable.ColorDrawable;import android.os.Handler;import android.support.v4.view.ViewPager;import android.os.Bundle;import android.util.Log;import android.util.TypedValue;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.view.WindowManager;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RadioGroup;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.gigatms.ConnectionState;import com.gigatms.TagInformationFormat;import com.gigatms.UHFCallback;import com.gigatms.UHFDevice;import com.gigatms.parameters.BuzzerOperationMode;import com.gigatms.parameters.RfSensitivityLevel;import com.gigatms.parameters.Session;import com.gigatms.parameters.Target;import com.gigatms.parameters.TriggerType;import com.gigatms.tools.Glog;import com.itechvision.ecrobo.pickman.AsyncTask.Globals;import com.itechvision.ecrobo.pickman.AsyncTask.MainAsynListener;import com.itechvision.ecrobo.pickman.AsyncTask.MainAsyncTask;import com.itechvision.ecrobo.pickman.AsyncTask.ParamsGetter;import com.itechvision.ecrobo.pickman.Chatman.Account.LoginActivity;import com.itechvision.ecrobo.pickman.Chatman.Account.SettingActivity;import com.itechvision.ecrobo.pickman.Chatman.Arrivals.api.GetArrivaldetail;import com.itechvision.ecrobo.pickman.Chatman.BaseActivity;import com.itechvision.ecrobo.pickman.Chatman.ConnectedDevices;import com.itechvision.ecrobo.pickman.Chatman.RFDeviceBaseScan;import com.itechvision.ecrobo.pickman.R;import com.itechvision.ecrobo.pickman.SlideMenu;import com.itechvision.ecrobo.pickman.Util.ActionBar;import com.itechvision.ecrobo.pickman.Util.CommonDialogs;import com.itechvision.ecrobo.pickman.Util.CommonFunctions;import com.itechvision.ecrobo.pickman.Util.CustomPagerAdapter;import com.itechvision.ecrobo.pickman.Util.TextToSpeak;import com.itechvision.ecrobo.pickman.Util.U;import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu;import net.vvakame.util.jsonpullparser.JsonPullParser;import net.vvakame.util.jsonpullparser.util.JsonArray;import net.vvakame.util.jsonpullparser.util.JsonHash;import java.util.ArrayList;import java.util.HashMap;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;import cn.pedant.SweetAlert.SweetAlertDialog;public class RFIDArrivalActivity  extends BaseActivity implements View.OnClickListener, MainAsynListener , UHFCallback {    static SlidingMenu menu;    SlideMenu slidemenu;    @BindView(R.id.actionbar) ActionBar actionbar;    @BindView(R.id.add_layout) Button numbrbtn;    @BindView(R.id.layout_main) RelativeLayout mainlayout;    @BindView(R.id.layout_number) RelativeLayout layout;    @BindView(R.id.rfidRg) RadioGroup radio;    @BindView(R.id.seriallayout) LinearLayout serailLayout;    @BindView(R.id.qntylayout) LinearLayout qntylayout;    @BindView(R.id.rfidLayout) LinearLayout rfIDlayout;    @BindView(R.id.txt1) TextView text1;    @BindView(R.id.txt2) TextView text2;    @BindView(R.id.txt3) TextView text3;    @BindView(R.id.btn_connect) Button connectionbtn;    @BindView(R.id.textlayout)LinearLayout textLayout;    @BindView(R.id.rfid) EditText edtEpc;    String rfscan = "";    SweetAlertDialog pDialog,pDialog1;    String adminID = "";    SharedPreferences spDomain;    public static final String DOMAINPREFERENCE = "domain";    public Button writebt,sendbtn;    public boolean orderRequestSettings = true;    private boolean showKeyboard;    private TextToSpeak mTextToSpeak;    private boolean visible = false;    public Context mcontext = this;    protected int mProcNo = 0;    public static final int PROC_RFID = 2;    public static final int PROC_BARCODE = 1;    public static final int PROC_QTY = 3;    public static final int PROC_SKU = 4;    public static int mRequestStatus = 0;    public static final int REQ_BARCODE = 1;    public static final int REQ_QTY = 2;    String finalrfid = "";    boolean confirmClick = false;    String TAG = RFIDArrivalActivity.class.getSimpleName();    //ReadWrite process starts    public static final String EXTRAS_DEVICE_ADDRESS = "DEVICE_ADDRESS";    String devMacAddress ="";    private UHFDevice uhf;    private String action = "";    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_rfid_arrival);        ButterKnife.bind(RFIDArrivalActivity.this);        getIDs();        Log.d(TAG,"On Create ");        ViewPager viewPager = (ViewPager) findViewById(R.id.viewpager);        viewPager.setAdapter(new CustomPagerAdapter(this));        writebt =(Button)findViewById(R.id.btnwrite) ;        sendbtn =(Button)findViewById(R.id.btnsend) ;        spDomain = getSharedPreferences(DOMAINPREFERENCE, Context.MODE_PRIVATE);        adminID = spDomain.getString("admin_id", null);        showKeyboard = BaseActivity.getaddKeyboard();        if (showKeyboard == true)        {            ViewGroup hiddenPanel = (ViewGroup) findViewById(R.id.layout_number);            visible = true;            mainlayout = (RelativeLayout) findViewById(R.id.layout_main);            RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) mainlayout.getLayoutParams();            int bottom = convert(200);            int top = convert(10);            params.setMargins(0, 0, 0, bottom);            layout = (RelativeLayout) findViewById(R.id.layout_number);            RelativeLayout.LayoutParams param = (RelativeLayout.LayoutParams) layout.getLayoutParams();            param.setMargins(0, top, 0, 0);            Log.e(TAG, "SetlayoutMarginnnnn");            mainlayout.setLayoutParams(params);            Animation bottomUp = AnimationUtils.loadAnimation(this, R.anim.bottom_up);            hiddenPanel.startAnimation(bottomUp);            hiddenPanel.setVisibility(View.VISIBLE);        }        mTextToSpeak = new TextToSpeak(this);        Log.e(TAG, "OnCreateeeeee");        _gt(R.id.serial).setBackground(getResources().getDrawable(R.drawable.basic_edittext_off_nopadding));        if (mProcNo == 0) nextProcess();        // READ WRITE Working        Intent i = getIntent();        if (i.hasExtra(EXTRAS_DEVICE_ADDRESS)){            devMacAddress = i.getStringExtra(EXTRAS_DEVICE_ADDRESS);        }        initUhfDevice();    }    //set title and icons on actionbar    private void getIDs() {        actionbarImplement(this, "新規入荷", " ",                0, false, false, false);        menu = setSlidingMenu(this);        slidemenu = new SlideMenu(menu, this);        relLayout1.setOnClickListener(this);    }    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.relLayout1:                menu.showMenu();                break;        }    }    @Override    public void onResume() {        super.onResume();        initUhfDevice();    }    private void initUhfDevice() {        UHFDevice uhf = (UHFDevice) ConnectedDevices.getInstance().get(devMacAddress);        if (uhf != null) {            Log.d(TAG, "initUhfDevice: found uhf");            this.uhf = uhf;            uhf.setUHFCallback(this);            if (uhf.getConnectionState().equals(ConnectionState.DISCONNECTED)) {                connectionbtn.setText("Connect");            } else if (uhf.getConnectionState().equals(ConnectionState.CONNECTED)) {                connectionbtn.setText("Disconnect");            }        }    }    public void AddLayout(View view) {        ViewGroup hiddenPanel = (ViewGroup) findViewById(R.id.layout_number);        if (visible == false)        {            visible = true;            numbrbtn.setText(R.string.hideKeyboard);            mainlayout = (RelativeLayout) findViewById(R.id.layout_main);            RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) mainlayout.getLayoutParams();            int bottom = convert(200);            int top = convert(10);            params.setMargins(0, 0, 0, bottom);            layout = (RelativeLayout) findViewById(R.id.layout_number);            RelativeLayout.LayoutParams param = (RelativeLayout.LayoutParams) layout.getLayoutParams();            param.setMargins(0, top, 0, 0);            Log.e(TAG, "SetlayoutMarginnnnn");            mainlayout.setLayoutParams(params);            Animation bottomUp = AnimationUtils.loadAnimation(this,                    R.anim.bottom_up);            hiddenPanel.startAnimation(bottomUp);            hiddenPanel.setVisibility(View.VISIBLE);        }        else {            visible = false;            numbrbtn.setText(R.string.showkeyboard);            mainlayout = (RelativeLayout) findViewById(R.id.layout_main);            RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) mainlayout.getLayoutParams();            params.setMargins(0, 0, 0, 10);            Animation bottomDown = AnimationUtils.loadAnimation(this,                    R.anim.bottom_down);            hiddenPanel.startAnimation(bottomDown);            hiddenPanel.setVisibility(View.INVISIBLE);            Log.e(TAG, "SetlayoutMarginnnnn");            mainlayout.setLayoutParams(params);        }    }    public int convert(int x) {        Resources r = mcontext.getResources();        int px = (int) TypedValue.applyDimension(                TypedValue.COMPLEX_UNIT_DIP,                x, r.getDisplayMetrics()        );        return px;    }    @OnClick(R.id.btnread) void Read()    {        Log.e(TAG,"READING >>   "+uhf);        String psw = "00000000";        action = "read";        uhf.readEpc(psw);    }    @OnClick(R.id.btnwrite) void Write(){        if(!_gts(R.id.sku).equals("") || !_gts(R.id.sku).equals("")) {            String sku = "";            int skuLength = _gts(R.id.sku).length();            int n = 21 - skuLength;            for (int i = 0; i < n; i++) {                sku = "0" + sku;            }            String finalsku = sku + _gts(R.id.sku);            Log.d(TAG, "onClick: finalsku" + finalsku);            String serial = "";            int serialLength = _gts(R.id.serial).length();            int a = 8 - serialLength;            for (int i = 0; i < a; i++) {                serial = "0" + serial;            }            String finalserial = serial + _gts(R.id.serial);            finalrfid = "000" + finalsku + finalserial;            submitserial();        }        else {            U.beepError(this, "Please submit the data");        }    }    @OnClick(R.id.btn_connect) void Connect(){        if(connectionbtn.getText().equals("Connect")){            if (uhf != null) {                uhf.connect();                connectionbtn.setText("Disconnect");}        }else {            pDialog1 = new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE);            pDialog1.setCancelable(true);            pDialog1.setContentText("本当にRFIDデバイスを切断しますか？");            pDialog1.setConfirmText("Yes");            pDialog1.setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {                @Override                public void onClick(SweetAlertDialog sweetAlertDialog) {                    pDialog1.changeAlertType(SweetAlertDialog.SUCCESS_TYPE);                    new Handler().postDelayed(new Runnable() {                        @Override                        public void run() {                            if (uhf != null) {                                uhf.disconnect();                                SharedPreferences.Editor editor = spDomain.edit();                                editor.putString("MacAddress","");                                editor.commit();                                Intent i =  new Intent(RFIDArrivalActivity.this, RFDeviceBaseScan.class);                                i.putExtra("rf_use","arrival");                                startActivity(i);                                connectionbtn.setText("Connect");                            }                            pDialog1.dismiss();                        }                    }, 1000);                }            });            pDialog1.setCancelText("No");            pDialog1.setCancelClickListener(new SweetAlertDialog.OnSweetClickListener() {                @Override                public void onClick(SweetAlertDialog sweetAlertDialog) {                    pDialog1.dismiss();                }            });            pDialog1.show();        }    }    @OnClick(R.id.btnsend) void Send(){        pDialog1 = new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE);        pDialog1.setCancelable(true);        pDialog1.setContentText("Do you want to confirm the arrival ?");        pDialog1.setConfirmText("Yes");        pDialog1.setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {            @Override            public void onClick(SweetAlertDialog sweetAlertDialog) {                if(!confirmClick) {                    pDialog1.changeAlertType(SweetAlertDialog.SUCCESS_TYPE);                    new Handler().postDelayed(new Runnable() {                        @Override                        public void run() {                            confirmClick = true;                            sendRequest(_gts(R.id.barcode), _gts(R.id.quantity));                            pDialog1.dismiss();                        }                    }, 1000);                }                else                    CommonDialogs.customToast(RFIDArrivalActivity.this, "Wait");            }        });        pDialog1.setCancelText("No");        pDialog1.setCancelClickListener(new SweetAlertDialog.OnSweetClickListener() {            @Override            public void onClick(SweetAlertDialog sweetAlertDialog) {                pDialog1.dismiss();            }        });    }    public void WritetoRFTag(String rf){        //  set password by default        String psw = "00000000";        byte[] e = Glog.hexStringToByteArray(rf);        action = "write";        if(uhf != null)            uhf.writeEpc(psw, e);    }    public void setProc(int procNo) {        mProcNo = procNo;        Log.e(TAG, "Proc Value :  " + mProcNo);        switch (procNo) {            case PROC_RFID:                _gt(R.id.barcode).setBackground(getResources().getDrawable(R.drawable.basic_edittext_off_nopadding));                _gt(R.id.rfid).setFocusableInTouchMode(true);                _gt(R.id.quantity).setBackground(getResources().getDrawable(R.drawable.basic_edittext_off_nopadding));                _gt(R.id.rfid).setBackground(getResources().getDrawable(R.drawable.basic_edittext_on_nopadding));                _gt(R.id.sku).setBackground(getResources().getDrawable(R.drawable.basic_edittext_off_nopadding));                break;            case PROC_BARCODE:                _gt(R.id.barcode).setBackground(getResources().getDrawable(R.drawable.basic_edittext_on_nopadding));                _gt(R.id.barcode).setFocusableInTouchMode(true);                _gt(R.id.quantity).setBackground(getResources().getDrawable(R.drawable.basic_edittext_off_nopadding));                _gt(R.id.rfid).setBackground(getResources().getDrawable(R.drawable.basic_edittext_off_nopadding));                _gt(R.id.sku).setBackground(getResources().getDrawable(R.drawable.basic_edittext_off_nopadding));                break;            case PROC_SKU:                _gt(R.id.sku).setBackground(getResources().getDrawable(R.drawable.basic_edittext_off_nopadding));                _gt(R.id.barcode).setFocusableInTouchMode(true);                _gt(R.id.quantity).setBackground(getResources().getDrawable(R.drawable.basic_edittext_off_nopadding));                _gt(R.id.rfid).setBackground(getResources().getDrawable(R.drawable.basic_edittext_off_nopadding));                _gt(R.id.barcode).setBackground(getResources().getDrawable(R.drawable.basic_edittext_on_nopadding));                break;            case PROC_QTY:                _gt(R.id.barcode).setBackground(getResources().getDrawable(R.drawable.basic_edittext_off_nopadding));                _gt(R.id.quantity).setBackground(getResources().getDrawable(R.drawable.basic_edittext_on_nopadding));                _gt(R.id.rfid).setBackground(getResources().getDrawable(R.drawable.basic_edittext_off_nopadding));;                _gt(R.id.quantity).setFocusableInTouchMode(true);                _gt(R.id.quantity).requestFocus();                _gt(R.id.serial).setBackground(getResources().getDrawable(R.drawable.basic_edittext_off_nopadding));                if (_gts(R.id.quantity).equals("1"))                    mTextToSpeak.startSpeaking("1");                break;        }    }    public void inputedEvent(String buff, boolean isScaned) {        switch (mProcNo) {            case PROC_RFID:                if(_gts(R.id.rfid).equals("")){                    Read();                }                String rf = _gts(R.id.rfid);                rf = rf.replaceFirst("^0+(?!$)", "");                _sts(R.id.rfid,rf);                Log.e(TAG, "input event   PROC_RFID    "+ rf +"    "+rfscan);                if ("".equals(rfscan)) {                    mTextToSpeak.resetQueue();                    U.beepError(this, "RFIDは必須です");                    _gt(R.id.rfid).setFocusableInTouchMode(true);                    break;                }                break;            case PROC_BARCODE:    // バーコード                String barcode1 = _gts(R.id.barcode);                if ("".equals(barcode1)) {                    mTextToSpeak.resetQueue();                    U.beepError(this, "バーコードは必須です");                    _gt(R.id.barcode).setFocusableInTouchMode(true);                    break;                }                if(barcode1.length() <= 4 && BaseActivity.getShopId().equalsIgnoreCase("1671")){                    U.beepError(this,"5桁以上のバーコードをスキャンしてください。");                    _gt(R.id.barcode).setFocusableInTouchMode(true);                    break;                }                Globals.getterList = new ArrayList<>();                Globals.getterList.add(new ParamsGetter("admin_id", adminID));                Globals.getterList.add(new ParamsGetter("barcode",  _gts(R.id.barcode)));                Globals.getterList.add(new ParamsGetter("mode","get_product"));                if(BaseActivity.getPrinterSelected()) {                    //  Globals.getterList.add(new ParamsGetter("printer_id", BaseActivity.getbarcodeselectedPrinterID()));                    Globals.getterList.add(new ParamsGetter("printer_db", "yes"));                } else{                    Globals.getterList.add(new ParamsGetter("printer_db", ""));                }                mRequestStatus = REQ_BARCODE;                new MainAsyncTask(this, Globals.Webservice.rfid_arrival, 1, RFIDArrivalActivity.this, "Form", Globals.getterList, true).execute();                break;            case PROC_SKU:    // バーコード                break;            case PROC_QTY: // 数量                String qty = _gts(R.id.quantity);                if (qty.equals(""))                    qty = "1";                String barcode = _gts(R.id.barcode);                Log.e(TAG, "Qtyyyyy  " + qty);                Log.e(TAG, "buff " + buff);                if (isScaned) {                    Log.e(TAG, "Barcode at present is   " + barcode);                    if (buff.equals(barcode)) {                        U.beepSuccess();                        qty = U.plusTo(qty, "1");                        _sts(R.id.quantity, qty);                        mTextToSpeak.startSpeaking(_gts(R.id.quantity));                        break;                    } else {                        U.beepError(this, "Barcode dont match");                        break;                    }                }                if ("".equals(qty)) {                    U.beepError(this, "数量は必須です");                    _gt(R.id.quantity).setFocusableInTouchMode(true);                    break;                } else if (!U.isNumber(qty)) {                    U.beepError(this, "数量は数値のみ入力可能です");                    _gt(R.id.quantity).setFocusableInTouchMode(true);                    break;                }                pDialog1 = new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE);                pDialog1.setCancelable(true);                pDialog1.setContentText("Do you want to confirm the arrival ?");                pDialog1.setConfirmText("Yes");                pDialog1.setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {                    @Override                    public void onClick(SweetAlertDialog sweetAlertDialog) {                        pDialog1.changeAlertType(SweetAlertDialog.SUCCESS_TYPE);                        new Handler().postDelayed(new Runnable() {                            @Override                            public void run() {                                stopTimer();                                sendRequest(_gts(R.id.barcode), _gts(R.id.quantity));                                pDialog1.dismiss();                            }                        }, 1000);                    }                });                pDialog1.setCancelText("No");                pDialog1.setCancelClickListener(new SweetAlertDialog.OnSweetClickListener() {                    @Override                    public void onClick(SweetAlertDialog sweetAlertDialog) {                        pDialog1.dismiss();                    }                });                pDialog1.show();                break;        }    }    void submitserial()    {        pDialog = new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE);        pDialog.setCancelable(true);        pDialog.setTitleText("Write to RFID");        pDialog.setContentText("Do you want to confirm the arrival ?");        pDialog.setConfirmText("Yes");        pDialog.setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {            @Override            public void onClick(SweetAlertDialog sweetAlertDialog) {                pDialog.changeAlertType(SweetAlertDialog.SUCCESS_TYPE);                new Handler().postDelayed(new Runnable() {                    @Override                    public void run() {                        sendRequest(_gts(R.id.barcode), "1");                        pDialog.dismiss();                    }                }, 1000);            }        });        pDialog.setCancelText("No");        pDialog.setCancelClickListener(new SweetAlertDialog.OnSweetClickListener() {            @Override            public void onClick(SweetAlertDialog sweetAlertDialog) {                pDialog.dismiss();            }        });        pDialog.show();    }    void sendRequest(String barcode, String qty) {        String serial = _gts(R.id.serial);        Globals.getterList = new ArrayList<>();        Log.e(TAG, "shopidddddd  " + BaseActivity.getShopId());        Globals.getterList.add(new ParamsGetter("admin_id", adminID));        Globals.getterList.add(new ParamsGetter("barcode", barcode));        Globals.getterList.add(new ParamsGetter("mode","arrival"));        if(orderRequestSettings)        {            Globals.getterList.add(new ParamsGetter("rf_id", rfscan));            Globals.getterList.add(new ParamsGetter("new_rf_id", finalrfid));        }        Globals.getterList.add(new ParamsGetter("serial", serial));        Globals.getterList.add(new ParamsGetter("qty", qty));//         if(BaseActivity.getPrinterSelected()) {//            Globals.getterList.add(new ParamsGetter("printer_id", BaseActivity.getbarcodeselectedPrinterID()));//        }        mRequestStatus = REQ_QTY;        new MainAsyncTask(this, Globals.Webservice.rfid_arrival, 1, RFIDArrivalActivity.this, "Form", Globals.getterList, true).execute();    }    @Override    public void nextProcess() {        Log.e(TAG, "nexttttPRocessssssssssssss");        _sts(R.id.barcode, "");        _sts(R.id.serial, "");        _sts(R.id.sku, "");        _sts(R.id.rfid, "");        _sts(R.id.quantity, "");        finalrfid = "";        setProc(PROC_BARCODE);        _gt(R.id.barcode).requestFocus();    }    @Override    public void inputedEvent(String buff) {        inputedEvent(buff, false);    }    @Override    public void clearEvent() {        mTextToSpeak.startSpeaking("clear");        text1.setText("");        text2.setText("");        text3.setText("");        nextProcess();    }    @Override    public void allclearEvent() {        mTextToSpeak.startSpeaking("clear");        text1.setText("");        text2.setText("");        text3.setText("");        nextProcess();    }    @Override    public void skipEvent() {    }    public void setLayout()    {        if(orderRequestSettings){            rfIDlayout.setVisibility(View.VISIBLE);            qntylayout.setVisibility(View.GONE);            serailLayout.setVisibility(View.VISIBLE);            writebt.setVisibility(View.VISIBLE);            sendbtn.setVisibility(View.GONE);            textLayout.setVisibility(View.VISIBLE);        }        else {            rfIDlayout.setVisibility(View.GONE);            qntylayout.setVisibility(View.VISIBLE);            serailLayout.setVisibility(View.GONE);            writebt.setVisibility(View.GONE);            sendbtn.setVisibility(View.VISIBLE);            textLayout.setVisibility(View.GONE);        }    }    @Override    public void keypressEvent(String key, String buff) {        switch (mProcNo) {            case PROC_BARCODE:    // バーコード                _sts(R.id.barcode, buff);                break;            case PROC_QTY: // 数量                _sts(R.id.quantity, buff);                break;            case PROC_RFID: // 数量                _sts(R.id.rfid, buff);                break;        }    }    @Override    public void scanedEvent(String barcode) {        if(!action.equals("write")){            if (!barcode.equals("")) {                Log.e(TAG, "ScannedEventttttt");                if (mProcNo == PROC_BARCODE) {                    // check for QR code                    if (BaseActivity.getUrl().equals("https://air-logi-st.air-logi.com/service") && BaseActivity.getShopId().equals("1011")) {                        String result = "";                        if (barcode.length() == 13) {                            result = barcode.substring(0, barcode.length() - 1);                            barcode = result;                        } else if (barcode.length() == 14) {                            result = barcode.substring(1, barcode.length() - 1);                            barcode = result;                        }                    }                    String finalbarcode = CommonFunctions.getBracode(barcode);                    barcode =finalbarcode;                    _sts(R.id.barcode, barcode);                }            }            if (mProcNo == PROC_QTY) {                String finalbarcode = CommonFunctions.getBracode(barcode);                barcode =finalbarcode;            }            this.inputedEvent(barcode, true);        }        else            U.beepError(this,"Rewrite the RFID tag");    }    @Override    public void enterEvent() {    }    @Override    public void deleteEvent(String barcode) {        switch (mProcNo) {            case PROC_BARCODE:    // バーコード                _sts(R.id.barcode, barcode);                break;            case PROC_QTY: // 数量                _sts(R.id.quantity, barcode);                break;        }    }    // READ WRITE FUNCTIONS START    @Override    public void didGeneralSuccess(final String s) {        runOnUiThread(new Runnable() {            @Override            public void run() {                if(action.equals("write")){                    text1.setText(finalrfid);                    text2.setText("RFID書込みと入荷が完了しました！");                    U.beepKakutei(RFIDArrivalActivity.this, "検品データを登録しました。");                    nextProcess();}                else                    Toast.makeText(getApplicationContext(), s + " Success", Toast.LENGTH_SHORT).show();                Log.e(TAG, "didGeneralSuccess    "+ s);                action = "";            }        });    }    @Override    public void didGeneralError(final String invokeApi, final String errorMessage) {        Log.d(TAG, "didGeneralError: " + invokeApi + ": " + errorMessage);        runOnUiThread(new Runnable() {            @Override            public void run() {                if(action.equals("write")){                    U.beepErrorVoice(RFIDArrivalActivity.this,null, R.raw.write01error);                    final SweetAlertDialog pDialog = new SweetAlertDialog(RFIDArrivalActivity.this, SweetAlertDialog.WARNING_TYPE);                    pDialog.setCancelable(false);                    pDialog.setTitleText("RFID書き込みされませんでした。");                    pDialog.setConfirmText("Rewrite");                    pDialog.setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {                        @Override                        public void onClick(SweetAlertDialog sweetAlertDialog) {                            WritetoRFTag(finalrfid);                            pDialog.dismiss();                        }                    });                    pDialog.show();                }                else {                    Toast.makeText(getApplicationContext(), invokeApi + ": " + errorMessage, Toast.LENGTH_SHORT).show();                    action = "";                }            }        });    }    @Override    public void didDiscoverTagInfo(TagInformationFormat tagInformationFormat) {    }    @Override    public void didReadEpc(final byte[] epc) {        runOnUiThread(new Runnable() {            @Override            public void run() {                edtEpc.setText(Glog.bytesToHexString(epc, ""));                rfscan = _gts(R.id.rfid);                Log.e(TAG, "READDDDD    "+ rfscan);                String rf = _gts(R.id.rfid);                rf = rf.replaceFirst("^0+(?!$)", "");                _sts(R.id.rfid,rf);                Log.e(TAG, "READDDDD    "+ rf);            }        });    }    @Override    protected void onDestroy() {        super.onDestroy();    }    @Override    protected void onStop() {        super.onStop();    }    @Override    public void didGetFirmwareVersion(String s) {    }    @Override    public void didGetRfPower(byte b) {    }    @Override    public void didGetRfSensitivity(RfSensitivityLevel rfSensitivityLevel) {    }    @Override    public void didGetFrequencyList(ArrayList<Double> arrayList) {    }    @Override    public void didGetTriggerType(TriggerType triggerType) {    }    @Override    public void didGetSessionAndTarget(Session session, Target target) {    }    @Override    public void didGetQValue(byte b) {    }    @Override    public void didGetBuzzerOperationMode(BuzzerOperationMode buzzerOperationMode) {    }    @Override    public void onPostSuccess(Object result, int flag, boolean isSucess) {        HashMap<String, String> mHash = new HashMap<>();        Log.e(TAG, result.toString());        try {            String response = result.toString();            JsonPullParser parser = JsonPullParser.newParser(response);            JsonHash map1 = JsonHash.fromParser(parser);            Log.e(TAG, " " + map1);            String msg = "";            JsonArray result1;            String code = map1.getStringOrNull("code");            msg = map1.getStringOrNull("message");            result1 = map1.getJsonArrayOrNull("results");            if (code == null) {                Log.e(TAG, "CODEeee============Nulllll");                CommonDialogs.customToast(getApplicationContext(), "Network error occured");            }            if ("0".equals(code) == true) {                Log.e("SendLogs111", code + "  " + msg + "  " + result1);                if (mRequestStatus == REQ_BARCODE) {                    new GetArrivaldetail().post(code, msg, result1, mHash, RFIDArrivalActivity.this);                } else if (mRequestStatus == REQ_QTY) {                    confirmClick = false;                    JsonHash row = (JsonHash) result1.get(0);                    if(orderRequestSettings){                        if(row.containsKey("rf_id")){                            String rf = row.getStringOrNull("rf_id");                            if(row.containsKey("location"))                            {                                String location = row.getStringOrNull("location");                                if (location.equals("pic-mea"))                                    showDialog("撮影/採寸ロケに移動しました。");                                else if (location.equals("measure"))                                    showDialog("採寸ロケに移動しました。");                                else if (location.equals("picture"))                                    showDialog("撮影ロケに移動しました。");                            }                            if(rf.equals(finalrfid)){                                WritetoRFTag(rf);                            }                            else {                                U.beepError(this,"RFID doesnt match");                            }                        }                    }                    else {                        if(row.containsKey("location"))                        {                            String location = row.getStringOrNull("location");                            if (location.equals("pic-mea"))                                showDialog("撮影/採寸ロケに移動しました。");                            else if (location.equals("measure"))                                showDialog("採寸ロケに移動しました。");                            else if (location.equals("picture"))                                showDialog("撮影ロケに移動しました。");                        }                        nextProcess();                    }                }            }else if(code.equalsIgnoreCase("1020")){                new android.app.AlertDialog.Builder(this, R.style.DialogThemee)                        .setTitle("Error!")                        .setMessage(msg)                        .setPositiveButton("Ok", new DialogInterface.OnClickListener() {                            public void onClick(DialogInterface dialog, int which) {                                Intent in = new Intent(RFIDArrivalActivity.this,LoginActivity.class);                                in.putExtra("ACTION", "logout" );                                startActivity(in);                                finish();                                dialog.dismiss();                            }                        })                        .show();            }            else if ("10299".equals(code) == true && mRequestStatus == REQ_QTY)            {                U.beepError(this,null);                final SweetAlertDialog pDialog1 = new SweetAlertDialog(RFIDArrivalActivity.this, SweetAlertDialog.WARNING_TYPE);                pDialog1.setCancelable(false);                pDialog1.setTitleText("RFIDまたシリアナンバが確認取れませんでした、\n" +                        "倉庫管理者までに連絡してください。");                pDialog1.setConfirmText("OK");                pDialog1.setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {                    @Override                    public void onClick(SweetAlertDialog sweetAlertDialog) {                        pDialog1.dismiss();                    }                });                pDialog1.show();            }            else{                if (mRequestStatus == REQ_BARCODE) {                    new GetArrivaldetail().valid(code, msg, result1, mHash, RFIDArrivalActivity.this);                } else if (mRequestStatus == REQ_QTY) {                    confirmClick = false;                    U.beepError(this, msg);                }            }        } catch (Exception e) {            System.out.print(e);        }    }    @Override    public void onPostError(int flag) {        confirmClick = false;    }}